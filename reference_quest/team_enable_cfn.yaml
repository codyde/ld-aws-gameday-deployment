# Copyright 2022 Amazon.com and its affiliates; all rights reserved. 
# This file is Amazon Web Services Content and may not be duplicated or distributed without permission.
AWSTemplateFormatVersion: "2010-09-09"
Description: Reference Quest

Parameters:
  # These parameters are supplied by the Quests API when this template is deployed 
  DeployAssetsBucket:
    # Default: ee-assets-prod-us-east-1
    Description: The name of the S3 bucket where assets are stored
    Type: String
  DeployAssetsKeyPrefix:
    # Default: modules/9c0e89820b864addaed45ec2f5440379/v5/
    Description: S3 key prefix where assets are stored
    Type: String
  QuestId:
    Default: 7bb514a9-a6dc-4fc0-a797-3f4a7bbd17bb
    Description: The ID assigned to this quest
    Type: String
  TeamLambdaSourceKey:
    Default: gdQuests-team-lambda-source.zip
    Description: S3 key for the Lambda source code used by the team account for the Quest
    Type: String
  StaticAssetsBucket:
    Type: String
    Description: (Optional) Bucket for static assets that live outside of the pipeline (e.g. data for seeding)
    Default: ''
  StaticAssetsKeyPrefix:
    Type: String
    Description: (Optional) Bucket prefix for static assets that live outside of the pipeline (e.g. data for seeding)
    Default: ''
  TeamWorkerSourceKey:
    Default: Archive.zip
    Description: S3 key for the dummy zip file containing the buildspec_prod.yml and dockerfile
    Type: String
# TODO - Evaluate if this should be as static as it is - will this collide with other users? It won't if they have their own individual accounts
  AppRepoName:
    Default: 'app-gameday-ld'
    Description: Gameday Repo Name
    Type: String
  LaunchDarklyClientKeySsmParam:
    Default: 'LD-ClientKey'
    Description: Client SDK Key for LaunchDarkly configuration
    Type: AWS::SSM::Parameter::Value<String>

  LaunchDarklyServerKeySsmParam:
    Default: 'LD-ServerKey'
    Description: Server SDK Key for LaunchDarkly configuration
    Type: AWS::SSM::Parameter::Value<String>
# I use this to query a Dynamo table that will be created in the central account that will have various validation values
  TeamTableSsmParam:
    Default: 'TableNumber'
    Description: AWS Gameday Table Number
    Type: AWS::SSM::Parameter::Value<String>

Resources: 
  # ╔══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
  # ║ AWS GameDay Quests - Team Enable Resources                                                                                                               ║
  # ╠═══════════════════════╤═════════════════════════════╤════════════════════════════════════════════════════════════════════════════════════════════════════╣
  # ║ LambdaRole            │ AWS::IAM::Role              │ Execution role for the resource lookup Lambda                                                      ║
  # ║ ResourceLookupLambda  │ AWS::Lambda::Function       │ Lambda Function that looks up default resources in the account                                     ║
  # ║ ResourceLookup        │ Custom::ResourceLookup      │ Custom provisioning logic invoking the Resource Lookup                                             ║
  # ║ WebAppOnEC2           │ AWS::EC2::Instance          │ An EC2 instance that runs a simple Apache Web App                                                  ║
  # ║ PublicSecurityGroup   │ AWS::EC2::SecurityGroup     │ The security group added to WebAppOnEC2                                                            ║
  # ║ DeveloperUser         │ AWS::IAM::User              │ The IAM user pretended to be compromised                                                           ║
  # ║ AccessKeys            │ AWS::IAM::AccessKey         │ The "compromised" access key for DeveloperUser                                                     ║
  # ╚═══════════════════════╧═════════════════════════════╧════════════════════════════════════════════════════════════════════════════════════════════════════╝


  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Description: Provides permissions for internally-invoked Lambda resources
      Policies:
      - PolicyName: CloudWatchLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: "*"
      - PolicyName: dynamodbAccessRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:*
            Resource: "*"
          - Effect: Allow
            Action:
            - logs:*
            Resource: "*"
      - PolicyName: S3AccessPol
        PolicyDocument:
          Statement:
          - Resource: "*"
            Effect: Allow
            Action:
              - s3:*
          - Resource: "arn:aws:s3:::*"
            Effect: Allow
            Action:
              - s3:*
      - PolicyName: ECRCleanup
        PolicyDocument:
          Statement:
          - Resource: "*"
            Effect: Allow
            Action:
              - ecr:*

      
  ResourceLookupLambda:
    Type: AWS::Lambda::Function
    Description: Lookup resources
    Properties:
      Handler: "resource_lookup.lambda_handler"
      Runtime: python3.9
      Timeout: '30'
      Code:
        S3Bucket: !Ref DeployAssetsBucket
        S3Key: !Join
          - ''
          - - !Ref DeployAssetsKeyPrefix
            - !Ref TeamLambdaSourceKey
      Role: !GetAtt LambdaRole.Arn

  # ResourceLookup:
  #   Type: Custom::ResourceLookup
  #   Properties:
  #     ServiceToken: !GetAtt ResourceLookupLambda.Arn

  # DeveloperUser:
  #   Type: 'AWS::IAM::User'
  #   Properties:
  #       UserName: ReferenceDeveloper
  #       ManagedPolicyArns:
  #          - 'arn:aws:iam::aws:policy/AdministratorAccess'

  InitFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3 
          import os
          import cfnresponse

          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table('GamedayDB')

          def handler(event, context):
            data = table.put_item(
            TableName='GamedayDB',
            Item={
                'teamid': '1',
                'debugcode': 'pants',
                'teamval': '123-abc',
                'title1':'Unicorn with Confidence',
                'text1':'Because you can always be confident when Unicorn.Rentals is providing your Unicorn.',
                'title2':'Mythically Reliabile',
                'text2':"If you can't trust that your Unicorn is going to be available when you ask for it, what can you really trust in this world?",
                'title3':'Automagic Unicornation',
                'text3':'The Unicorn is neither missing nor present. Its Automagic. It arrives when it needs to be there, and not a second before.',
                }
            )

            response = {
              'statusCode': 200,
              'body': 'successfully created items!',
              'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
              },
            }
            cfnresponse.send(event, context, cfnresponse.SUCCESS, response) 

      Handler: index.handler
      Role:
        Fn::GetAtt: [ LambdaRole , "Arn" ]
      Runtime: python3.9
      Timeout: 60
    DependsOn: GamedayDB

  PopulateData:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt InitFunction.Arn
    DependsOn: GamedayDB

  GamedayDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: GamedayDB
      AttributeDefinitions:
        - AttributeName: teamid
          AttributeType: S
      KeySchema:
        - AttributeName: teamid
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
    DependsOn: PipelineCloudWatchEventRole

  # CodeBuild needs a place to put artifacts in the interim.
  CodePipelineArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete

  CleanS3:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json, boto3, logging
          import cfnresponse
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              logger.info("event: {}".format(event))
              try:
                  bucket = event['ResourceProperties']['BucketName']
                  logger.info("bucket: {}, event['RequestType']: {}".format(bucket,event['RequestType']))
                  if event['RequestType'] == 'Delete':
                      s3 = boto3.resource('s3')
                      bucket = s3.Bucket(bucket)
                      for obj in bucket.objects.filter():
                          logger.info("delete obj: {}".format(obj))
                          s3.Object(bucket.name, obj.key).delete()

                  sendResponseCfn(event, context, cfnresponse.SUCCESS)
              except Exception as e:
                  logger.info("Exception: {}".format(e))
                  sendResponseCfn(event, context, cfnresponse.FAILED)

          def sendResponseCfn(event, context, responseStatus):
              responseData = {}
              responseData['Data'] = {}
              cfnresponse.send(event, context, responseStatus, responseData, "CustomResourcePhysicalID") 
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt: [ LambdaRole , "Arn" ]
      Runtime: python3.9
      Timeout: 60

  CleanECR:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import os
          
          account_id = os.environ['ACCOUNT_ID']
          ecr_repository_name = os.environ['ECR_REPOSITORY_NAME']
          
          ecr_client = boto3.client('ecr')
           
          DELETE = 'Delete'
          response_data = {}
          
          def lambda_handler(event, context):
            try:
              if event['RequestType'] == DELETE:
                list_images_response = ecr_client.list_images(
                  registryId=account_id,
                  repositoryName=ecr_repository_name
                  )
                  
                image_ids = list_images_response['imageIds']
                
                if len(image_ids) == 0:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
                  return
                
                batch_delete_image_response = ecr_client.batch_delete_image(
                  registryId=account_id,
                  repositoryName=ecr_repository_name,
                  imageIds=image_ids
                  )
                print(batch_delete_image_response)
              
              cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
              
            except Exception as e:
              print(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, response_data)
      Environment:
        Variables:
          ACCOUNT_ID: !Ref AWS::AccountId
          ECR_REPOSITORY_NAME: !Ref UnicornRentalsApp
      Handler: index.lambda_handler
      Runtime: python3.9
      Role:
        Fn::GetAtt: [ LambdaRole , "Arn" ]

  CleanECROnDelete:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt CleanECR.Arn
    DependsOn: UnicornRentalsApp

  cleanupBucketOnDelete:
    Type: Custom::cleanupbucket
    Properties:
      ServiceToken: !GetAtt CleanS3.Arn
      BucketName: !Ref CodePipelineArtifactBucket
    DependsOn: CodePipelineArtifactBucket

  UnicornRentalsApp:
    Type: AWS::ECR::Repository

  MyAppRepo:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: !Ref AppRepoName
      RepositoryDescription:  This is the repository in CodeCommit
      Code:
        S3:
          Bucket: !Ref StaticAssetsBucket
          Key: !Ref TeamWorkerSourceKey

  DockerBuildCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      Source:
        Type: "CODEPIPELINE"
        BuildSpec: "buildspec_prod.yml"
      Environment:
        PrivilegedMode: true
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/standard:5.0"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
            Type: PLAINTEXT
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${UnicornRentalsApp}
            Type: PLAINTEXT
          - Name: NEXT_PUBLIC_LD_CLIENT_KEY
            Value: !Ref LaunchDarklyClientKeySsmParam
            Type: PLAINTEXT
          - Name: LD_SERVER_KEY
            Value: !Ref LaunchDarklyServerKeySsmParam
            Type: PLAINTEXT
          - Name: NEXT_PUBLIC_TEAM_ID
            Value: !Ref TeamTableSsmParam
            Type: PLAINTEXT
      Name: !Sub ${AWS::StackName}-image-build
      ServiceRole: !Ref CodePipelineServiceRole

  Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'AppRunnerRole'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ['tasks.apprunner.amazonaws.com']
            Action: ['sts:AssumeRole']
      Path: /
      Policies: #Need to add lambda here
        - PolicyName: ddb-access
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:BatchGetItem
                - dynamodb:Scan
                - dynamodb:Query
                - dynamodb:ConditionCheckItem
              Resource:
                - !GetAtt GamedayDB.Arn
        - PolicyName: S3Stuff
          PolicyDocument:
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - s3:*
              - Resource: "arn:aws:s3:::*"
                Effect: Allow
                Action:
                  - s3:*
        - PolicyName: ECRAccessGD
          PolicyDocument:
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - ecr:*
              - Resource: "arn:aws:ecr:::*"
                Effect: Allow
                Action:
                  - ecr:*

  LaunchDarklyPipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactBucket
      Name: LaunchDarkly-app-pipeline
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      Stages:
        - Name: 'Source'
          Actions:
            - Name: 'Source'
              ActionTypeId:
                Category: 'Source'
                Owner: 'AWS'
                Version: '1'
                Provider: CodeCommit
              OutputArtifacts:
                - Name: SourceArtifact
              Configuration:
                BranchName: main
                RepositoryName: !Ref AppRepoName
              RunOrder: 1
        - Name: 'Build_Docker_Container'
          Actions:
            - Name: CodeBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ProjectName: !Ref DockerBuildCodeBuildProject
              RunOrder: 1

  PipelineCloudWatchEventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: cwe-pipeline-execution
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${LaunchDarklyPipeline}

  # This role is used by CodePipeline to trigger deployments
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
                - "cloudformation.amazonaws.com"
                - "codedeploy.amazonaws.com"
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource: "arn:aws:s3:::*"
                Effect: Allow
                Action:
                  - s3:PutObject
              - Resource: "*"
                Effect: Allow
                Action:
                  - codecommit:*
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - iam:PassRole
                  - iam:CreateRole
                  - iam:DetachRolePolicy
                  - iam:AttachRolePolicy
                  - iam:PassRole
                  - iam:PutRolePolicy
                  - cloudwatch:*
              - Resource: "*"
                Effect: Allow
                Action:
                  - ecs:*
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
              - Resource: !Sub arn:aws:s3:::${CodePipelineArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource:
                  - !Sub arn:aws:s3:::codepipeline-${AWS::Region}-*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
              - Effect: Allow
                Action:
                  - ecr:*
                Resource:
                  - !GetAtt UnicornRentalsApp.Arn
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: "*"

Outputs:
  QuestsResourceLocks:
    Description: A JSON object that defines what IAM actions to restrict as a result of deploying this template
    Value: !Sub |-
      [
        {
          "Actions": [
            "lambda:DeleteFunction",
            "lambda:GetFunction",
            "lambda:InvokeFunction",
            "lambda:PublishVersion",
            "lambda:RemovePermission",
            "lambda:UpdateFunctionCode",
            "lambda:UpdateFunctionConfiguration",
            "lambda:UpdateFunctionUrlConfig",
            "lambda:UpdateFunctionEventInvokeConfig"
          ],
          "Resources": [
            "${ResourceLookupLambda.Arn}"
          ]
        }
      ]
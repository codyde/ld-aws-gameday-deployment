# Copyright 2022 Amazon.com and its affiliates; all rights reserved. 
# This file is Amazon Web Services Content and may not be duplicated or distributed without permission.
AWSTemplateFormatVersion: "2010-09-09"
Description: Reference Quest

Parameters:
  # These parameters are supplied by the Quests API when this template is deployed 
  DeployAssetsBucket:
    # Default: ee-assets-prod-us-east-1
    Description: The name of the S3 bucket where assets are stored
    Type: String
  DeployAssetsKeyPrefix:
    # Default: modules/9c0e89820b864addaed45ec2f5440379/v5/
    Description: S3 key prefix where assets are stored
    Type: String
  # Additional parameters required by this template
  QuestId:
    Default: 2ae514a9-a6dc-4fc0-a797-3f4a7bbd1d63
    Description: The ID assigned to this quest
    Type: String
  TeamLambdaSourceKey:
    Default: gdQuests-team-lambda-source.zip
    Description: S3 key for the Lambda source code used by the team account for the Quest
    Type: String
  StaticAssetsBucket:
    Type: String
    Description: (Optional) Bucket for static assets that live outside of the pipeline (e.g. data for seeding)
    Default: ''
  StaticAssetsKeyPrefix:
    Type: String
    Description: (Optional) Bucket prefix for static assets that live outside of the pipeline (e.g. data for seeding)
    Default: ''
  


# Mappings:
#   AWSRegionAMI:
#     us-east-1:
#       HVM64: ami-090fa75af13c156b4
#     us-east-2:
#       HVM64: ami-051dfed8f67f095f5   
#     us-west-1:
#       HVM64: ami-0e4d9ed95865f3b40
#     us-west-2:
#       HVM64: ami-0cea098ed2ac54925
#     eu-west-1:
#       HVM64: ami-089950bc622d39ed8
#     eu-west-2:
#       HVM64: ami-0e34bbddc66def5ac
#     eu-central-1:
#       HVM64: ami-0c956e207f9d113d5


Resources: 
  # ╔══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
  # ║ AWS GameDay Quests - Team Enable Resources                                                                                                               ║
  # ╠═══════════════════════╤═════════════════════════════╤════════════════════════════════════════════════════════════════════════════════════════════════════╣
  # ║ LambdaRole            │ AWS::IAM::Role              │ Execution role for the resource lookup Lambda                                                      ║
  # ║ ResourceLookupLambda  │ AWS::Lambda::Function       │ Lambda Function that looks up default resources in the account                                     ║
  # ║ ResourceLookup        │ Custom::ResourceLookup      │ Custom provisioning logic invoking the Resource Lookup                                             ║
  # ║ WebAppOnEC2           │ AWS::EC2::Instance          │ An EC2 instance that runs a simple Apache Web App                                                  ║
  # ║ PublicSecurityGroup   │ AWS::EC2::SecurityGroup     │ The security group added to WebAppOnEC2                                                            ║
  # ║ DeveloperUser         │ AWS::IAM::User              │ The IAM user pretended to be compromised                                                           ║
  # ║ AccessKeys            │ AWS::IAM::AccessKey         │ The "compromised" access key for DeveloperUser                                                     ║
  # ╚═══════════════════════╧═════════════════════════════╧════════════════════════════════════════════════════════════════════════════════════════════════════╝

  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Description: Provides permissions for internally-invoked Lambda resources
      Policies:
      - PolicyName: CloudWatchLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: "*"
      - PolicyName: EC2Policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:*
            Resource: "*"

  ResourceLookupLambda:
    Type: AWS::Lambda::Function
    Description: Lookup resources
    Properties:
      Handler: "resource_lookup.lambda_handler"
      Runtime: python3.9
      Timeout: '30'
      Code:
        S3Bucket: !Ref DeployAssetsBucket
        S3Key: !Join
          - ''
          - - !Ref DeployAssetsKeyPrefix
            - !Ref TeamLambdaSourceKey
      Role: !GetAtt LambdaRole.Arn

  ResourceLookup:
    Type: Custom::ResourceLookup
    Properties:
      ServiceToken: !GetAtt ResourceLookupLambda.Arn
    
  # WebAppOnEC2:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     ImageId: !FindInMap [AWSRegionAMI, !Ref 'AWS::Region', 'HVM64']
  #     InstanceType: 't2.nano'
  #     UserData: !Base64
  #       Fn::Join:
  #       - "\n"
  #       - - '#!/bin/bash -xe'
  #         - 'yum update -y'
  #         - 'yum install -y httpd'
  #         - 'echo "<html><body><h1>This is our brand new web app</h1><p>Something is still missing but not too bad for a start</p></body></html>" > /var/www/html/index.html'
  #         - 'service httpd start'
  #     SecurityGroupIds:
  #       - Ref: PublicSecurityGroup
  #     Tags:
  #       - Key: Name
  #         Value: Reference Quest Web App

  # PublicSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupName: "public-sg"
  #     GroupDescription: "Security group for EC2 in public subnet"
  #     # The VpcId property below is provided just as an example for the ResourceLookup custom resource.
  #     # In reality, there is no need for it in this case since by default the Security Group will already
  #     # be associated with the default VPC in the account
  #     VpcId: !GetAtt ResourceLookup.VpcId
  #     SecurityGroupIngress:
  #     - IpProtocol: tcp
  #       FromPort: '80'
  #       ToPort: '80'
  #       CidrIp: 0.0.0.0/0
  #     Tags:
  #       - Key: name
          # Value: Reference Quest Web App Security Group

  DeveloperUser:
    Type: 'AWS::IAM::User'
    Properties:
        UserName: ReferenceDeveloper
        ManagedPolicyArns:
           - 'arn:aws:iam::aws:policy/AdministratorAccess'
  AccessKeys:
    Type: AWS::IAM::AccessKey
    Properties: 
      UserName:  
        Ref: DeveloperUser

Outputs:
  # EC2IPAddress:
  #   Description: The IP address of the EC2 instance running the web application
  #   Value: !GetAtt WebAppOnEC2.PublicIp

  # SecurityGroup:
  #   Description: The Security Group ID
  #   Value: !Ref PublicSecurityGroup

  UserAccessKeyName:
    Description: Access key for the user
    Value:
      Ref: AccessKeys

  # This section modifies the team's TeamRole IAM role to restrict the listed actions on the specified resources.
  # The purpose is to avoid that a team cheats by picking into or execute resources they shouldn't be able to manipulate
  QuestsResourceLocks:
    Description: A JSON object that defines what IAM actions to restrict as a result of deploying this template
    Value: !Sub |-
      [
        {
          "Actions": [
            "lambda:DeleteFunction",
            "lambda:GetFunction",
            "lambda:InvokeFunction",
            "lambda:PublishVersion",
            "lambda:RemovePermission",
            "lambda:UpdateFunctionCode",
            "lambda:UpdateFunctionConfiguration",
            "lambda:UpdateFunctionUrlConfig",
            "lambda:UpdateFunctionEventInvokeConfig"
          ],
          "Resources": [
            "${ResourceLookupLambda.Arn}"
          ]
        }
      ]